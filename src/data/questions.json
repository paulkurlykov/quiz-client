{
  "questions": [
    {
      "id": "0001",
      "question": "this is question",
      "label": "js",
      "answerType": "options",
      "options": [
        "this is option A",
        "this is option B",
        "this is option C",
        "this is option D"
      ],
      "textAnswer": "This is a text answer!",
      "rightAnswer": 1
    },
    {
      "id": "4f0a",
      "question": "Вопрос мой таков",
      "label": "js",
      "answerType": "options",
      "options": [
        "Жопа",
        "Сися",
        "Пися",
        "Лицо"
      ],
      "textAnswer": "",
      "rightAnswer": "2"
    },
    {
      "id": "3e3d",
      "question": "Что такое Map коллекция?",
      "label": "js",
      "answerType": "text",
      "options": [],
      "textAnswer": "Map — коллекция для хранения данных любого типа в виде пар [ключ, значение], то есть каждое значение сохраняется по уникальному ключу, который потом используется для доступа к этому значению. Причём в качестве ключей тоже принимаются значения любого типа.\n\nОсновные методы для работы с коллекцией Map:\n\nset(ключ, значение) — устанавливает значение;\nget(ключ) — возвращает значение;\nhas(ключ) — проверяет наличие переданного ключа;\nvalues() — возвращает итератор всех значений коллекции;\nkeys() — возвращает итератор всех ключей коллекции;\nentries() — возвращает итератор пар [ключ, значение];\ndelete(ключ) — удаляет конкретное значение;\nclear() — полностью очищает коллекцию;\nforEach(колбэк) — перебирает ключи и значения коллекции.\n\n",
      "rightAnswer": "1",
      "codeSnippet": "const someData = new Map()\n\nsomeData.set('1', 'Значение под строковым ключом 1')\nsomeData.set(1, 'Значение под числовым ключом 1')"
    },
    {
      "id": "e58d",
      "question": "Что такое Set?",
      "label": "js",
      "answerType": "text",
      "options": [],
      "textAnswer": "Set (по-русски говорят множество) — коллекция для хранения уникальных значений любого типа. Одно и то же значение нельзя добавить в Set больше одного раза.\n\nSet — это неиндексированная коллекция, положить элемент в коллекцию можно, но достать нельзя. По элементам коллекции можно итерироваться.\n\nОсновные методы для работы с коллекцией:\n\nadd() — добавить элемент.\ndelete() — удалить элемент.\nhas() — проверить, есть ли элемент в коллекции.\nclear() — очистить коллекцию.\nforEach() — выполнить функцию для каждого элемента в коллекции, аналогично одноимённому методу массива.\nСодержит свойство size для получения количества элементов в коллекции.",
      "rightAnswer": 1,
      "codeSnippet": "const uniqueIds = new Set()\n\nuniqueIds.add(123)"
    },
    {
      "id": "c320",
      "question": "Примитивные и не примитивные типы данных",
      "label": "js",
      "answerType": "text",
      "options": [],
      "textAnswer": "Примитивные типы данных:\n\nstring, number, boolean, symbol, null, undefined и bigint\n\nНе примитивные типы данных:\n\nОбъекты, массивы, функции. \n\nПримитивные значения (например, числа или строки) хранятся в переменной как есть, а объекты, массивы и функции — по ссылке на место в памяти.\n\n",
      "rightAnswer": 1,
      "codeSnippet": ""
    },
    {
      "id": "6dd7",
      "question": "В чем разница между var, let, const?",
      "label": "js",
      "answerType": "text",
      "options": [],
      "textAnswer": "1) Особенности var --а) ФУНКЦИОНАЛЬНАЯ ОБЛАСТЬ ВИДИМОСТИ. Это значит, что var, объявленная в блоке if/else, будет доступна в глобальном скопе (если функций нет), или внутри функции (если блок находится в функции). --б) HOISTING. var можно присвоить значение до ее объявления и ошибки не будет (будет значение undefined). Это называется всплытием, поднятием или hoisting. --в) ПЕРЕНАЗНАЧЕНИЕ. Можно существующую переменную переобъявить, и ошибки не будет. 2) Особенности let & const --а) let - это исправленная версия var, лишенная всех недостатков. С ней не работает hoisting, ее нельзя переназначить (появится ошибка). --б) БЛОЧНАЯ ОБЛАСТЬ ВИДИМОСТИ - это означает, что переменная доступна только в том скопе, в котором была создана. Это глобальный скоуп, или локальный скоуп (блок или функция) --в) Разница между let и const - const нельзя поменять значение (но менять значения внутри обьекта, если const - обьект), и нельзя объявить без присваивания значения.",
      "rightAnswer": 1,
      "codeSnippet": ""
  },
  {
      "id": "9e24",
      "question": "Что такое hoisting?",
      "label": "js",
      "answerType": "options",
      "options": [
          "Всплытие событий",
          "Загрузка проекта на хостинг",
          "Всплытие переменных",
          "Ререндер компонентов"
      ],
      "textAnswer": "Правильный ответ С - Всплытие переменных. Hoisting – это уникальная особенность JavaScript, которая позволяет вам обращаться к переменным и функциям до того, как они были объявлены в коде. var - поднимаются наверх, им присваивается undefined до инициализации. let, const - не поднимаются, появляется ошибка ReferrenceError. function - поднимается только functional declaration",
      "rightAnswer": "3",
      "codeSnippet": "// 1) hoisting with var is working console.log(foo);   // undefined var foo = \"Tom\"; // 2) hoisting with let & const not working console.log(bar); let bar = 'Soyer'; // ReferrenceError // 3) hoisiting with function declaration is working makeSquared(2); // 4 function makeSquared(num) { return num * num; };"
  },
  {
      "id": "e408",
      "question": "Что такое замыкание?",
      "label": "js",
      "answerType": "text",
      "options": [],
      "textAnswer": "Здесь необходимо знать, что такое лексическое окружение и контекст выполнения. 1) Лексическое окружение (далее - ЛО) - это невидимый объект, который создается автоматически, и состоит из двух вещей: а) Список с переменными, которые относятся к текущему ЛО. б) Ссылка на внешнее (родительское) ЛО. Если это глобальное ЛО - то ссылка ведет на null. 2) Дочернее ЛО имеет доступ к родительскому ЛО. Но не наоборот. 3) ЛО появляется только при вызове функции. Глобальное ЛО конечно появляется сразу. Ну а все дочерние - только при вызове функций. В каждой функции свое ЛО.",
      "rightAnswer": 1,
      "codeSnippet": "// Пример 1 const x = 1; const logToConsole = function() { const i = 'Hi'; console.log(i); } logToConsole(); // Пример 2 function makeCounter(count) { return function () { return count++; }; } let counter1 = makeCounter(0); let counter2 = makeCounter(0); console.log(counter1()); // 0 console.log(counter1()); // 1 console.log(counter2()); // 0 console.log(counter2()); // 1 // Пример 3 function createIncrement() { let count = 0; function increment() { count++; } let message = `Count is ${count}`; function log() { console.log(message); } return [increment, log]; } const [increment, log] = createIncrement(); increment(); increment(); increment(); log();"
  },
  {
      "id": "ebc3",
      "question": "Назвать все функции округления и принцип работы на примере числа 3.54",
      "label": "js",
      "answerType": "text",
      "options": [],
      "textAnswer": "Math.round(num) - округляет по обычному правилу. Получится 4. Math.ceil(num) - округляет вверх (ceiling - потолок) до целого числа. Получится 4. Math.floor(num) - округляет вниз (floor - пол) до целого числа. Получится 3. Math.trunc(num) - не округляет, просто убирает цифры после точки. Получится 3. num.toFixed(1) - не округляет, определяет количество знаков после точки. Получится 3.5",
      "rightAnswer": 1,
      "codeSnippet": "const number = 3.54; console.log(Math.round(number)); // 4 console.log(Math.ceil(number)); // 4 console.log(Math.floor(number)); // 3 console.log(Math.trunc(number)); // 3 console.log(number.toFixed(1)); // 3.5"
  },
  {
      "id": "bb51",
      "question": "В чем разница между count++ и ++count",
      "label": "js",
      "answerType": "text",
      "options": [],
      "textAnswer": "Это постфиксная и префиксная форма инкремента. Сокращенная запись от: counter++ | counter = counter + 1. Если не важен результат (Вариант А), то и нет разницы. Если важен результат возвращения (Вариант б), то разница в том, что: -- префиксная форма сначала делает операцию, а потом возвращает значение. -- постфиксная сначала возвращает, потом делает операцию",
      "rightAnswer": 1,
      "codeSnippet": "// Вариант А let counter = 0; counter++; ++counter; alert( counter ); // 2, обе строки сделали одно и то же // Вариант Б let counter = 1; let a = counter++; // (*) меняем ++counter на counter++ alert(a); // 1"
  },
  {
      "id": "f9b2",
      "question": "Напиши функцию, которая вернет: рандомное число от 2 до 33, рандомное число от n1 до n2",
      "label": "js",
      "answerType": "text",
      "options": [],
      "textAnswer": "1) Функция Math.random() возвращает число между 0 и 1. 2) Рассчитываем диапазон - определяем MIN и MAX. Это число умножаем на сумму разницы между MIN и MAX плюс MIN. Math.random() * ( MAX - MIN ) + MIN. 3) Округляем. Важно понимать, использовать floor, ceil или round: --а) Если используем floor - тогда нужно прибавлять 1 к произведению рандома и числа, чтобы не выпал ноль. --б) Если используем ceil, то занизить на 1 MAX, чтобы его не захватывало. --d) round будет захватывать и MIN и MAX",
      "rightAnswer": 1,
      "codeSnippet": "const randomNumber = (MIN, MAX) => Math.round(Math.random() * (MAX - MIN) + MIN ); console.log(2, 33);"
  },
  {
      "id": "f86d",
      "question": "Что делает метод findIndex",
      "label": "js",
      "answerType": "options",
      "options": [
          "Возвращает первый индекс, удовлетворяющий условию",
          "Возвращает первый элемент, удовлетворяющий условию",
          "Возвращает булин, если есть индекс, удовлетворяющий условию",
          "Возвращает индекс, если есть матч с переданным значением"
      ],
      "textAnswer": "findIndex принимает callback-функцию, в которой каждый элемент массива проверяется на условие. Возвращает индекс первого элемента, удовлетворяющего условию.",
      "rightAnswer": 1,
      "codeSnippet": "const arr = [\"J\", \"U\", \"V\", \"E\"]; arr.findIndex(element => element === 'V'); // 2"
  },
  {
      "id": "dea4",
      "question": "Что делает метод indexOf",
      "label": "js",
      "answerType": "options",
      "options": [
          "Возвращает первый индекс, удовлетворяющий условию",
          "Возвращает первый элемент, удовлетворяющий условию",
          "Возвращает булин, если есть индекс, удовлетворяющий условию",
          "Возвращает первый индекс, если есть матч с переданным значением"
      ],
      "textAnswer": "indexOf возвращает первый индекс элемента, который совпадает с переданным значением.",
      "rightAnswer": "4",
      "codeSnippet": "const arr = [\"J\", \"U\", \"V\", \"E\"]; arr.indexOf('U'); // 1"
  },
  {
      "id": "8183",
      "question": "Какая разница между методами includes, some, every",
      "label": "js",
      "answerType": "text",
      "options": [],
      "textAnswer": "-includes принимает значение, и возвращает boolean, если есть элемент, совпадающий со значением. -some принимает callback-функцию, и возвращает true, если хоть один элемент удовлетовряет условию в callback-функции. -every принимает callback, и возвращает true, если все элементы удовлетворяют условие из callback",
      "rightAnswer": 1,
      "codeSnippet": "const arr = [\"J\", \"U\", \"V\", \"E\"]; // includes arr.includes('J'); // true // some arr.some((el) => el === \"J\"); // true // every arr.every((el) => el === \"J\"); // false"
  },
  {
      "id": "a149",
      "question": "Что делает метод find?",
      "label": "js",
      "answerType": "options",
      "options": [
          "Возвращает первый индекс, удовлетворяющий условию",
          "Возвращает первый элемент, удовлетворяющий условию",
          "Возвращает булин, если есть индекс, удовлетворяющий условию",
          "Возвращает индекс, если есть матч с переданным значением"
      ],
      "textAnswer": "find принимает callback-функцию, которая проверяет элементы на условие. Возвращает первый элемент, который удовлетворяет условию callback-функции",
      "rightAnswer": "2",
      "codeSnippet": "const arr = [{ age: 20, call: 'Georgiy' }, { age: 33, call: 'Olga' }, { age: 69, call: 'Piotre' }] let res = arr.find((el => el.age === 69)); console.log(res); // {age: 69, call: \"Piotre\"};"
  },
  {
      "id": "9c05",
      "question": "Что делают методы split и join и как правильно работают аргументы?",
      "label": "js",
      "answerType": "text",
      "options": [],
      "textAnswer": "str.SPLIT(\"\"); разбивает строку на массив. Значение в кавычках - это выбранный разделитель. Сам разделитель не войдет в состав массива. Если разделитель не указан, просто разбивает строку по буквам. arr.JOIN(\"\"); Соединяет элементы массива в строку. Значение в кавычках - это разделитель, то что будет разделять элементы массива в новой строке. Если разделитель не указан, элементы соединяются без него - сплошняком.",
      "rightAnswer": 1,
      "codeSnippet": "let string = 'Karac,haevo oni kone,shno'; let arr = string.split(\",\"); console.log(arr); // ['Karac', 'haevo oni kone', 'shno'] let newString = arr.join(\"\"); console.log(newString); // Karachaevo oni koneshno"
  },
  {
      "id": "d6e4",
      "question": "Как работает метод splice, что означают его аргументы",
      "label": "js",
      "answerType": "text",
      "options": [],
      "textAnswer": "Метод splice вырезает кусок из массива. При этом вырезанный кусок можно сохранить в переменную. Первый аргумент - индекс, с которого начинается вырез. Поддерживаются и отрицательные числа - в этом случае индекс отсчитывается с конца с права налево. Последний элемент -1, предпоследний -2, и так далее. Второй аргумент - количество элементов, которые нужно вырезать. Вообще еще есть 3 и 4 аргумент - это аргументы вставки, но на практике не видел такого.",
      "rightAnswer": 1,
      "codeSnippet": "const arr = [1,2,3,4,5,6,7]; let res = arr.splice(1, 2); console.log(res); // [2, 3] console.log(arr); // [1, 4, 5, 6, 7]"
  },
  {
      "id": "5ce1",
      "question": "Как работает метод slice?",
      "label": "js",
      "answerType": "text",
      "options": [],
      "textAnswer": "Метод работы slice схож со splice, но только он не вырезает, а копирует часть массива. Второе отличие - обозначение диапазона элементов. Первый аргумент - индекс, с которого начинается копирование. Второй аргумент - тоже индекс, на котором копирование закончится. Второго аргумента может и не быть, тогда будут скопированы все элементы с указанного индекса. В этом случае принимается и отрицательный индекс. Принцип хдесь - такой же, как в splice.",
      "rightAnswer": 1,
      "codeSnippet": "const arr = [1,2,3,4,5,6,7]; let res = arr.slice(2, 5); console.log(res); // [3, 4, 5] console.log(arr); // [1, 2, 3, 4, 5, 6, 7]"
  }
  ]
}